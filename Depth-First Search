import java.util.*;

public class GraphDFS {
    private final int vertices;
    private final LinkedList<Integer>[] adj;

    GraphDFS(int v) {
        vertices = v;
        adj = new LinkedList[v];
        for (int i = 0; i < v; i++)
            adj[i] = new LinkedList<>();
    }

    void addEdge(int src, int dest) {
        adj[src].add(dest);
        adj[dest].add(src);
    }

    void dfs(int start, boolean[] visited) {
        visited[start] = true;
        System.out.print(start + " ");
        for (int neighbor : adj[start]) {
            if (!visited[neighbor])
                dfs(neighbor, visited);
        }
    }

    public static void main(String[] args) {
        GraphDFS g = new GraphDFS(7);
        g.addEdge(0, 1);
        g.addEdge(0, 2);
        g.addEdge(1, 3);
        g.addEdge(2, 4);
        g.addEdge(3, 5);
        g.addEdge(4, 6);

        boolean[] visited = new boolean[7];
        System.out.println("DFS starting from node 0:");
        g.dfs(0, visited);
    }
}
